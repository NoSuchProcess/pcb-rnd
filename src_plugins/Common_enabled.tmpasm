# explicit rules: .y -> .c
#  do not assume old yacc to work to different file names, do the generation
#  in a separate directory to allow parallel compilation with -j
switch /local/pcb/mod/YACC
	case {^$} end
	default
		foreach /local/n in /local/pcb/mod/YACC
			put /local/bn /local/n
			sub {/local/bn} {^.*/} {}
			put /local/dn /local/n
			sub {/local/dn} {/[^/]*$} {}

			if /local/pcb/want_parsgen
			then
				append /local/pcb/RULES [@
# yacc for @/local/pcb/mod@
@/local/n@.c @/local/n@.h: @/local/n@.y
	cd @/local/dn@ && bison --defines=@/local/bn@.h --output=@/local/bn@.c --report-file=@/local/bn@.output -d @/local/bn@.y
@]
			else
				append /local/pcb/RULES [@
# dummy yacc for @/local/pcb/mod@
@/local/n@.c @/local/n@.h:
	echo "skipping yacc..."
@]
			end
		end
	end
end

# explicit rules: .l -> .c
#  do not assume old lex to work to different file names, do the generation
#  in a separate directory to allow parallel compilation with -j
switch /local/pcb/mod/LEX
	case {^$} end
	default
		foreach /local/n in /local/pcb/mod/LEX
			if /local/pcb/want_parsgen
			then
				put /local/bn /local/n
				sub {/local/bn} {^.*/} {}
				put /local/dn /local/n
				sub {/local/dn} {/[^/]*$} {}

				append /local/pcb/RULES [@
# lex for @/local/pcb/mod@
@/local/n@.c @/local/n@.h: @/local/n@.l
	cd @/local/dn@ && flex --outfile=@/local/bn@.c --header-file=@/local/bn@.h @/local/bn@.l
@]
			else
				append /local/pcb/RULES [@
# dummy lex for @/local/pcb/mod@
@/local/n@.c:
	echo "skipping flex..."
@]
			end
		end
	end
end

switch /local/pcb/mod/CONF
	case {^$} end
	default
		put /local/pcb/mod/CONFOUT /local/pcb/mod/CONF
		sub {/local/pcb/mod/CONFOUT} {.h$} {_fields.h}
		append /local/pcb/CLEANFILES /local/pcb/mod/CONFOUT
		append /local/pcb/RULES [@
# conf generation for @/local/pcb/mod@ '@/local/pcb/mod/CONF@'
@/local/pcb/mod/CONFOUT@: @/local/pcb/mod/CONF@
	AWK=@/host/fstools/awk@ ../scconfig/gen_conf.sh < @/local/pcb/mod/CONF@ > @/local/pcb/mod/CONFOUT@
@]
		end
end

# explicit rules: .sphash -> .c
# Space separated list of .sphash input files
# Optional: aux data fileds:   $(PLUGDIR)/query/consts.sphash::long:int:val;
switch ?/local/pcb/mod/SPHASH
	case {^$} end
	default
		foreach /local/nn in /local/pcb/mod/SPHASH
			put /local/n  /local/nn
			sub {/local/n} {::.*$} {}
			put /local/bn /local/n
			sub {/local/bn} {.[^.]*$} {}
			put /local/pr /local/bn
			sub {/local/pr} {^.*/} {}
			switch /local/nn
				case {::}
					put /local/aux /local/nn
					sub {/local/aux} {^.*::} {}
					gsub {/local/aux} {:} { }
					sub {/local/aux} {^} {--aux "}
					append {/local/aux} {"}
					end
				default
					put /local/aux {}
					end
			end
			append /local/pcb/RULES [@
# sphash for @/local/pcb/mod@
@/local/bn@_sphash.c @/local/bn@_sphash.h: $(SPHASH) @/local/n@
	$(SPHASH) @/local/aux@ --prefix @/local/pcb/mod@_@/local/pr@ --out @/local/bn@_sphash < @/local/n@
@]
		end
	end
end

put /local/pcb/mod/OBJS {}
put /local/pcb/mod/OBJS_C99 {}
put /local/pcb/mod/CONF {}
put /local/pcb/mod/LDFLAGS {}
put /local/pcb/mod/CFLAGS {}
put /local/pcb/mod/YACC {}
put /local/pcb/mod/LEX {}
put /local/pcb/mod/SPHASH {}
put /local/pcb/mod {}

