ha:{
	li:mouse {
		li:left {
			li:press            = { Mode(Notify) }
			li:press-shift      = { Mode(Notify) }
			li:press-ctrl       = { Mode(Save); Mode(None); Mode(Restore); Mode(Notify) }
			li:release          = { Mode(Release) }
			li:release-shift    = { Mode(Release) }
			li:release-ctrl     = { Mode(Release) }
		}
		li:middle {
			li:press              = { Pan(1) }
			li:release            = { Pan(0) }
		}
		li:right {
			li:release       = { Popup(popup-obj, obj-type) }
			li:shift-release = { Popup(popup-obj-misc) }
			li:press-ctrl    = { Display(CycleCrosshair) }
		}
		li:scroll-up {
			li:press        = { Zoom(0.8) }
			li:press-shift  = { Scroll(up) }
			li:press-ctrl   = { Scroll(left) }
		}
		li:scroll-down {
			li:press       = { Zoom(1.25) }
			li:press-shift = { Scroll(down) }
			li:press-ctrl  = { Scroll(right) }
		}
	}
	
	li:main_menu {
		### File Menu
		ha:File {
			m=F
			li:submenu {
				ha:Start New Layout                  = { li:a={{<key>f;<key>n}; {Ctrl<Key>n};}; action=New() }
				ha:Revert                            = { a={<key>f;<key>r};          action=Load(Revert,none); tip=Revert to the layout stored on disk }
				-
				ha:Load layout                       = { li:a={{<key>f;<key>o};{<key>f;<key>l};}  action=Load(Layout); tip=Load a layout from a file }
				-
				ha:Save Layout                       = { m=S; li:a={{<key>f;<key>s}; {Ctrl<Key>s};};        action=Save(Layout); tip=Saves current layout }
				ha:Save Layout As...                 = { m=A; li:a={{<key>f;<key>a}; {Shift Ctrl<Key>s};};  action=Save(LayoutAs); tip=Saves current layout into a new file }
				-
				ha:Import {
					m=I
					li:submenu {
						ha:Import gschem schematics          = {                             action=Import() }
						ha:Import tEDAx schematics           = {                             action=LoadTedaxFrom(netlist) }
						ha:Import KiCad/eeschema schematics  = {                             action=LoadEeschemaFrom() }
						ha:Import mentor graphics schematics = {                             action=LoadMentorFrom() }
						ha:Load subcircuit data to paste-buffer = {                          li:action={PasteBuffer(Clear); Load(ElementTobuffer)} }
						ha:Load layout data to paste-buffer  = {                             li:action={PasteBuffer(Clear); Load(LayoutTobuffer)} }
						ha:Load netlist file                 = {                             action=Load(Netlist) }
						ha:Load vendor resource file         = {                             action=LoadVendorFrom() }
						ha:Load routed dsn or ses file       = {                             action=LoadDsnFrom() }
						ha:Load MUCS pl file                 = {                             action=LoadMucsFrom() }
						ha:Load TinyCAD .net file            = {                             action=LoadTinyCADFrom() }
						ha:Load LTSpice .net and .asc files  = {                             action=LoadLTSpiceFrom() }
						ha:Load HP-GL plot to paste-buffer   = {                             action=LoadHPGLFrom() }
						ha:Load Hyperlynx .hyp file          = {                             action=LoadHypFrom() }
					}
				}
				-
				ha:Save connection data of {
					li:submenu {
						ha:a single element                  = {                  li:action={ Save(ElementConnections) } }
						ha:all elements                      = {                  action=Save(AllConnections) }
						ha:unused pins                       = {                  action=Save(AllUnusedPins) }
						ha:netlist patch for back annotation = {li:a={{<key>f;<key>x;<key>p}; {<key>a;<key>b;<key>x};}; action=SavePatch() }
					}
				}
				ha:Print layout...      = { a={<key>f;<key>p}; action=Print()}
				ha:Export layout...     = { a={<key>f;<key>e}; action=ExportGUI()}
				ha:Reports {
					li:submenu {
						ha:Generate object report  = { a={<key>i;<key>r}; action=ReportObject() }
						ha:Generate drill summary  = { a={<key>i;<key>d}; action=Report(DrillReport) }
						ha:Report found pins\/pads = { a={<key>i;<key>f}; action=Report(FoundPins) }
					}
				}
				-
				ha:Preferences...       = { a={<key>i;<key>c;<key>p}; action=DoWindows(Preferences)}
				ha:Maintenance {
					li:submenu {
						ha:Calibrate Printer...           = { a={<key>i;<key>c;<key>c}; action=PrintCalibrate() }
						ha:Re-scan the footprint library  = { a={<key>i;<key>c;<key>r}; action=fp_rehash() }
						-
						ha:Edit current font              = { action=FontEdit() }
						ha:Edit on-disk font              = { action={ LoadFontFrom("", 126); conf(set, design/text_font_id, 126, design); FontEdit() } }
						ha:Save font from font editor     = { action=FontSave() }
					}
				}
				-
				ha:Quit Program         = { li:a={{<key>f;<key>q}; {Ctrl<Key>q};}; action=Quit() }
			}
		} # File

		ha:Edit {
			m=E
			li:submenu {
				ha:Undo last operation          = { li:a={{<key>u; <Key>u}; {Ctrl<Key>z};};   action=Undo() }
				ha:Redo last undone operation   = { li:a={{<key>u; <Key>r}; {Ctrl<Key>y};};   action=Redo() }
				ha:Clear undo-buffer            = { a={<key>u; <Key>c}; action=Undo(ClearList) }
				-
				ha:Cut selection to buffer      = { li:a={{<key>e; <Key>x}; a=Ctrl<Key>x;}; li:action={ GetXY(Click to set the snap point for this buffer); PasteBuffer(Clear); PasteBuffer(MoveSelected); Mode(PasteBuffer) } }
				ha:Copy selection to buffer     = { li:a={{<key>e; <key>c}; {Ctrl<Key>c;};};  li:action={ GetXY(Click to set the snap point for this buffer); PasteBuffer(Clear); PasteBuffer(AddSelected); Unselect(All); Mode(PasteBuffer) } }
				ha:Paste buffer to layout       = { li:a={{<key>e; <Key>v}; a=Ctrl<Key>v;};   action=Mode(PasteBuffer) }
				-
				ha:Remove object                = { li:a={{<key>e;<key>d};{<Key>Delete};}; li:action={Mode(Save); Mode(Remove); Mode(Notify); Mode(Restore)} }
				ha:Change object {
					li:submenu {
						ha:Set Same as style        = { a={<key>e; <key>s}; action=SetSame() }
						ha:Flip Object              = { a={<key>e; <key>i}; action=Flip(Object) }
						ha:Move Object to current layer = { a={<key>e; <key>m; <key>l}; action=MoveToCurrentLayer(Object) }
					}
				}
				-
				ha:Edit name of {
					ha:Change font on layout        = { li:a={{<key>e;<key>o};}   action=FontSel(Object) }
					li:submenu {
						ha:text on layout             = { li:a={{<key>e;<key>t};};  action=ChangeName(Object) }
						ha:layout                     = {                           action=ChangeName(Layout) }
						ha:active layer               = {                           action=ChangeName(Layer) }
					}
				}
				ha:Edit attributes of {
					li:submenu {
						ha:Layout                     = { action=Attributes(Layout) }
						ha:CurrentLayer               = { action=Attributes(Layer) }
					}
				}
				ha:Route Styles {
					li:submenu {
						@routestyles
						-
						ha:Edit...                    = { action=AdjustStyle(0) }
					}
				}
				-
				ha:Subcircuit {
					li:submenu {
						ha:Layer bindings...          = { a={<key>e; <key>l; <key>b}; action=LayerBinding() }
						ha:External editor...         = { a={<key>e; <key>e}; li:action={ GetXY(Click on the subcircuit to edit); extedit(object) } }
					}
				}
				ha:Object flags...                = { a={<key>e; <key>f}; action=FlagEdit() }
				ha:Object Properties...           = { a={<key>e; <key>p}; action=PropEdit() }
			}
		} # Edit

		ha:View {
			m=V
			li:submenu {
			ha:Grid {
				m=G
				li:submenu {
					ha:Enable visible grid        = { a={<key>v; <key>g}; checked=editor/draw_grid; action=conf(toggle, editor/draw_grid, design) }
					ha:Enable local grid          = { a={<key>v; <key>l}; checked=plugins/hid_gtk/local_grid/enable; action=conf(toggle, plugins/hid_gtk/local_grid/enable, design) }
					ha:Grid units {
						li:submenu {
							ha:mil                    = { a={<key>v; <key>i}; checked=ChkGridUnits(mil); action=SetUnits(mil); update_on={editor/grid_unit} }
							ha:mm                     = { a={<key>v; <key>m}; checked=ChkGridUnits(mm); action=SetUnits(mm); update_on={editor/grid_unit} }
						}
					}
					ha:Grid size = {
						li:submenu {
							ha:No Grid                = { checked=ChkGridSize(none); action=SetValue(Grid,1); update_on={editor/grid} }
							-
							ha:0.1 mil                = { checked=ChkGridSize(0.1mil); li:action={SetUnits(mil); SetValue(Grid,0.1mil)}; update_on={editor/grid} }
							ha:1 mil                  = { checked=ChkGridSize(1mil); li:action={SetUnits(mil); SetValue(Grid,1mil)}; update_on={editor/grid} }
							ha:5 mil                  = { checked=ChkGridSize(5mil); li:action={SetUnits(mil); SetValue(Grid,5mil)}; update_on={editor/grid} }
							ha:10 mil                 = { checked=ChkGridSize(10mil); li:action={SetUnits(mil); SetValue(Grid,10mil)}; update_on={editor/grid} }
							ha:25 mil                 = { checked=ChkGridSize(25mil); li:action={SetUnits(mil); SetValue(Grid,25mil)}; update_on={editor/grid} }
							ha:50 mil                 = { checked=ChkGridSize(50mil); li:action={SetUnits(mil); SetValue(Grid,50mil)}; update_on={editor/grid} }
							ha:100 mil                = { checked=ChkGridSize(100mil); li:action={SetUnits(mil); SetValue(Grid,100mil)}; update_on={editor/grid} }
							-
							ha:0.01 mm                = { checked=ChkGridSize(0.01mm); li:action={SetUnits(mm); SetValue(Grid,0.01mm)}; update_on={editor/grid} }
							ha:0.05 mm                = { checked=ChkGridSize(0.05mm); li:action={SetUnits(mm); SetValue(Grid,0.05mm)}; update_on={editor/grid} }
							ha:0.1 mm                 = { checked=ChkGridSize(0.10mm); li:action={SetUnits(mm); SetValue(Grid,0.1mm)}; update_on={editor/grid} }
							ha:0.25 mm                = { checked=ChkGridSize(0.25mm); li:action={SetUnits(mm); SetValue(Grid,0.25mm)}; update_on={editor/grid} }
							ha:0.5 mm                 = { checked=ChkGridSize(0.50mm); li:action={SetUnits(mm); SetValue(Grid,0.5mm)}; update_on={editor/grid} }
							ha:1 mm                   = { checked=ChkGridSize(1mm); li:action={SetUnits(mm); SetValue(Grid,1mm)}; update_on={editor/grid} }
							-
							ha:Grid -5mil             = { action=SetValue(Grid,-5,mil) }
							ha:Grid +5mil             = { action=SetValue(Grid,+5,mil) }
							ha:Grid -0.05mm           = { action=SetValue(Grid,-0.05,mm) }
							ha:Grid +0.05mm           = { action=SetValue(Grid,+0.05,mm) }
						}
					}
					ha:Grid properties = {
						li:submenu {
							ha:Enable local grid      = { checked=plugins/hid_gtk/local_grid/enable; action=conf(toggle, plugins/hid_gtk/local_grid/enable, design) }
							-
							ha:local grid radius 4    = { checked={conf(iseq, plugins/hid_gtk/local_grid/radius, 4)}; li:action={conf(set, plugins/hid_gtk/local_grid/radius, 4, design); conf(set, plugins/hid_gtk/local_grid/enable, 1, design) } }
							ha:local grid radius 8    = { checked={conf(iseq, plugins/hid_gtk/local_grid/radius, 8)}; li:action={conf(set, plugins/hid_gtk/local_grid/radius, 8, design); conf(set, plugins/hid_gtk/local_grid/enable, 1, design) } }
							ha:local grid radius 16   = { checked={conf(iseq, plugins/hid_gtk/local_grid/radius, 16)}; li:action={conf(set, plugins/hid_gtk/local_grid/radius, 16, design); conf(set, plugins/hid_gtk/local_grid/enable, 1, design) } }
							ha:local grid radius 32   = { checked={conf(iseq, plugins/hid_gtk/local_grid/radius, 32)}; li:action={conf(set, plugins/hid_gtk/local_grid/radius, 32, design); conf(set, plugins/hid_gtk/local_grid/enable, 1, design) } }
							-
							ha:sparse global grid     = { checked=plugins/hid_gtk/global_grid/sparse; action=conf(toggle, plugins/hid_gtk/global_grid/sparse, design) }
							ha:global grid density 4  = { checked={conf(iseq, plugins/hid_gtk/global_grid/min_dist_px, 4)}; li:action={conf(set, plugins/hid_gtk/global_grid/min_dist_px, 4, design); conf(set, plugins/hid_gtk/local_grid/enable, 0, design) } }
							ha:global grid density 8  = { checked={conf(iseq, plugins/hid_gtk/global_grid/min_dist_px, 8)}; li:action={conf(set, plugins/hid_gtk/global_grid/min_dist_px, 8, design); conf(set, plugins/hid_gtk/local_grid/enable, 0, design) } }
							ha:global grid density 16 = { checked={conf(iseq, plugins/hid_gtk/global_grid/min_dist_px, 16)}; li:action={conf(set, plugins/hid_gtk/global_grid/min_dist_px, 16, design); conf(set, plugins/hid_gtk/local_grid/enable, 0, design) } }
						}
					}
					ha:Realign grid               = { a={<key>v; <key>r}; action={ GetXY(Click to set the grid origin); Display(ToggleGrid) } }
					}
				}
				-
				ha:Displayed subcircuit ID {
					li:submenu {
						ha:refdes                 = { checked=ChkSubcID(); action=Display(SubcID); update_on={editor/name_on_pcb} }
						ha:footprint              = { checked=ChkSubcID(%a.footprint%); action=Display(SubcID,"%a.footprint%"); update_on={editor/subc_id} }
						ha:value                  = { checked=ChkSubcID(%a.value%); action=Display(SubcID,"%a.value%"); update_on={editor/subc_id} }
						ha:refdes+value           = { checked=ChkSubcID(%a.refdes%\\n%a.value%); action=Display(SubcID,"%a.refdes%\\\\n%a.value%"); update_on={editor/subc_id} }
					}
				}
				ha:Zoom and side {
					li:submenu {
						ha:Zoom In 20%            = { m=Z; a=<Key>z; action=Zoom(-1.2) }
						ha:Zoom Out 20%           = { m=O; a=Shift<Key>z; action=Zoom(+1.2) }
						ha:Zoom Max               = { li:a={{<key>v;<key>f};}; m=M; action=Zoom() }
						ha:Zoom In 2X             = { action=Zoom(-2) }
						ha:Zoom Out 2X            = { action=Zoom(+2) }
						ha:Zoom to 0.1mil/px      = { action={Zoom(=0.1mil)} }
						ha:Zoom to 0.01mm/px      = { action={Zoom(=0.01mm)} }
						ha:Zoom to 1mil/px        = { action={Zoom(=1mil)} }
						ha:Zoom to 0.05mm/px      = { action={Zoom(=0.05mm)} }
						ha:Zoom to 2.5mil/px      = { action={Zoom(=2.5mil)} }
						ha:Zoom to 0.1mm/px       = { action={Zoom(=0.1mm)} }
						ha:Zoom to 10mil/px       = { action={Zoom(=10mil)} }
						ha:Zoom In 20% and center = { m=Z; li:action={Zoom(-1.2); Center()} }
						ha:Zoom Out 20% and center= { m=O; li:action={Zoom(+1.2); Center()} }
						-
						ha:Flip up/down           = { checked=editor/view/flip_y; a=<Key>Tab; action=SwapSides(V) }
						ha:Flip left/right        = { checked=editor/view/flip_x; a=Shift<Key>Tab; action=SwapSides(H) }
						ha:Spin 180 degrees       = { a=Ctrl<Key>Tab; action=SwapSides(R) }
						ha:Swap Sides             = { a=Ctrl Shift<Key>Tab; action=SwapSides() }
						-
						ha:Center cursor          = { a={<key>v; <key>c} action=Center() }
					}
				}
				ha:Layers {
					m=G
					li:submenu {
						ha:Shown Layers {
							li:submenu {
								@layerview
								-
								ha:Edit Layer Groups      = { action=EditLayerGroups() }
							}
						}
						ha:Current Layer {
							li:submenu {
								anon2=@layerpick
								-
								ha:Delete current layer   = { action=MoveLayer(c,-1) }
								ha:Add new layer          = { action=MoveLayer(-1,c) }
								ha:Move current layer up  = { action=MoveLayer(c,step-) }
								ha:Move current layer down= { action=MoveLayer(c,step+) }
							}
						}
					}
				}
				ha:Show padstack numbers in a subc = { a={<key>v; <key>n} action=Display(PinOrPadName) }
				ha:Full screen                     = { checked=editor/fullscreen; a=<char>\\;  action=fullscreen(toggle) }
			}
		} # View

		ha:Mode = {
			m=M
			li:submenu {
				ha:Routing {
					m=R
					li:submenu {
						ha:'All-direction' lines            = { li:a={{<key>m; <key>l; <key>a}; {<char>.};}; checked=editor/alldirection_lines; action=conf(toggle, editor/all_direction_lines, design) }
						ha:Cycle line clip/refraction       = { li:a={{<key>m; <key>l; <key>f}; {<char>/};}; action=Display(CycleClip) }
						ha:Auto swap line start angle       = { checked=editor/swap_start_direction; action=conf(toggle, editor/swap_start_direction, design) }
						ha:Auto enforce DRC clearance       = { a={<key>m; <key>l; <key>d}; checked=editor/auto_drc; action=conf(toggle, editor/auto_drc, design) }
						ha:Rubber band mode                 = { a={<key>m; <key>r; <key>r}; checked=editor/rubber_band_mode; action=conf(toggle, editor/rubber_band_mode, design) }
						ha:Rubber band keeps middle line dir= { a={<key>m; <key>r; <key>m}; checked=editor/rubber_band_keep_midlinedir; action=conf(toggle, editor/rubber_band_keep_midlinedir, design) }
						ha:New lines, arcs clear polygons   = { a={<key>m; <key>l; <key>c}; checked=editor/clear_line; action=conf(toggle, editor/clear_line, design) }
						ha:New polygons are full ones       = { a={<key>m; <key>p; <key>f}; checked=editor/full_poly; action=conf(toggle, editor/full_poly, design) }
						ha:New polygons clear polygons      = { a={<key>m; <key>p; <key>c}; checked=editor/clear_polypoly; action=conf(toggle, editor/clear_polypoly, design) }
					}
				}
				ha:Cursor/snap {
					m=C
					li:submenu {
						ha:Orthogonal moves                 = { a={<key>m; <key>c; <key>o}; checked=editor/orthogonal_moves; action=conf(toggle, editor/orthogonal_moves, design) }
						ha:Crosshair snaps to padstacks     = { a={<key>m; <key>c; <key>p}; checked=editor/snap_pin; action=conf(toggle, editor/snap_pin, design) }
						ha:Crosshair snaps to off-grid points on lines = { a={<key>m; <key>c; <key>s};checked=editor/snap_offgrid_line; action=conf(toggle, editor/snap_offgrid_line, design) }
						ha:Crosshair shows DRC clearance    = { a={<key>m; <key>c; <key>c}; checked=editor/show_drc; action=conf(toggle, editor/show_drc, design) }
					}
				}
				ha:Drawing {
					m=D
					li:submenu {
						ha:Show autorouter trials           = { a={<key>m; <key>d; <key>a}; checked=editor/live_routing; action=conf(toggle, editor/live_routing, design) }
						ha:Highlighting on line, arc points = { a={<key>m; <key>d; <key>h}; checked=editor/highlight_on_point; action=conf(toggle, editor/highlight_on_point, design) }
						ha:Wireframe draw                   = { li:a={{<key>m; <key>d; <key>w}; {<key>|};}; checked=editor/wireframe_draw; action=conf(toggle, editor/wireframe_draw, design) }
						ha:Thin draw                        = { a={<key>m; <key>d; <key>t}; checked=editor/thin_draw;  action=conf(toggle, editor/thin_draw, design) }
						ha:Thin draw poly                   = { a={<key>m; <key>d; <key>p}; checked=editor/thin_drawpoly; action=conf(toggle, editor/thin_draw_poly, design) }
						ha:Check polygons                   = { a={<key>m; <key>d; <key>c}; checked=editor/check_planes; action=conf(toggle, editor/check_planes, design) }
						-
						ha:Lock floaters                    = { a={<key>m; <key>f; <key>l}; checked=editor/lock_names; action=conf(toggle, editor/lock_names, design) }
						ha:Only floaters                    = { a={<key>m; <key>f; <key>o}; checked=editor/only_names; action=conf(toggle, editor/only_names, design) }
						ha:Hide floaters                    = { a={<key>m; <key>f; <key>h}; checked=editor/hide_names; action=conf(toggle, editor/hide_names, design) }
					}
				}
				ha:Mincut on shorts                 = { checked=plugins/mincut/enable; action=conf(toggle, plugins/mincut/enable, design) }
				ha:Auto-zero delta measurements     = { checked=editor/local_ref; action=conf(toggle, editor/local_ref, design) }
				ha:Brave mode                       = { action=brave() }
				ha:Vendor drill mapping             = { checked=plugins/vendor/enable; action=conf(toggle, plugins/vendor/enable, design) }
				ha:Tool {
					li:submenu {
						ha:None           = { checked=ChkMode(none);            action=Mode(None); update_on={editor/mode} }
						ha:Via            = { checked=ChkMode(via);         li:a={{<key>t;<key>v};{<Key>F1};}; action=Mode(Via); update_on={editor/mode} }
						ha:Line           = { checked=ChkMode(line);        li:a={{<key>t;<key>l};{<Key>F2};}; action=Mode(Line); update_on={editor/mode} }
						ha:Arc            = { checked=ChkMode(arc);         li:a={{<key>t;<key>a};{<Key>F3};}; action=Mode(Arc); update_on={editor/mode} }
						ha:Text           = { checked=ChkMode(text);        li:a={{<key>t;<key>t};{<Key>F4};}; action=Mode(Text); update_on={editor/mode} }
						ha:Rectangle      = { checked=ChkMode(rectangle);   li:a={{<key>t;<key>r};{<Key>F5};}; action=Mode(Rectangle); update_on={editor/mode} }
						ha:Polygon        = { checked=ChkMode(polygon);     li:a={{<key>t;<key>p};{<Key>F6};}; action=Mode(Polygon); update_on={editor/mode} }
						ha:Polygon Hole   = { checked=ChkMode(polygonhole); a={<key>t;<key>h}; action=Mode(PolygonHole); update_on={editor/mode} }
						ha:Buffer         = { checked=ChkMode(pastebuffer); li:a={{<key>t;<key>b};{<Key>F7};}; action=Mode(PasteBuffer); update_on={editor/mode} }
						ha:Del/Remove     = { checked=ChkMode(remove);      li:a={{<key>t;<key>d};{<Key>F8};}; action=Mode(Remove); update_on={editor/mode} }
						ha:Rotate         = { checked=ChkMode(rotate);      li:a={{<key>t;<key>o};{<Key>F9};}; action=Mode(Rotate); update_on={editor/mode} }
						ha:Thermal        = { checked=ChkMode(thermal);     li:a={{<key>t;<key>e};{<Key>F10};}; action=Mode(Thermal); update_on={editor/mode} }
						ha:Arrow          = { checked=ChkMode(arrow);       li:a={{<key>t;<key>n};{<Key>F11};}; action=Mode(Arrow); update_on={editor/mode} }
						ha:Insert Point   = { checked=ChkMode(insertpoint); li:a={{<key>t;<key>i};{<Key>Insert};}; action=Mode(InsertPoint); update_on={editor/mode} }
						ha:Move           = { checked=ChkMode(move);        a={<key>t;<key>m}; action=Mode(Move); update_on={editor/mode} }
						ha:Copy           = { checked=ChkMode(copy);        a={<key>t;<key>c}; action=Mode(Copy); update_on={editor/mode} }
						ha:Lock           = { checked=ChkMode(lock);        li:a={{<key>t;<key>k};{<Key>F12};}; action=Mode(Lock); update_on={editor/mode} }
						ha:Cancel         = {                               a={<Key>Escape}; action=Mode(Escape) }
					}
				} # Tool
			}
		} #Mode

		ha:Select {
			m=l
			li:submenu {
				ha:Select all visible objects      = { a={<key>s; <key>a; <key>a;}; action=Select(All) }
				ha:Select all connected objects    = { a={<key>s; <key>a; <key>c;}; action=Select(Connection) }
				ha:Unselect all objects            = { a={<key>s; <key>u; <key>a;}; action=Unselect(All) }
				ha:unselect all connected objects  = { a={<key>s; <key>u; <key>c;}; action=Unselect(Connection) }
				-
#TODO: this is gtk-specific
				ha:Advanced search and select      = { a={<key>s; <key>s;} action=DoWindows(search) }
				-
				ha:Move selected subcircuits to other side= { a={<key>s; <key>f;} action=Flip(SelectedElements) }
				ha:Move selected objects to current layer = { a={<key>s; <key>l;} action=MoveToCurrentLayer(Selected) }
				ha:Remove selected objects                = { a={<key>s; <key>r;} action=RemoveSelected() }
				ha:Convert selection to subcircuit        = { a={<key>s; <key>c; <key>s;} action=Select(ConvertSubc) }
				ha:Convert selection to padstack          = { a={<key>s; <key>c; <key>p;} li:action={PadstackConvert(selected); Mode(PasteBuffer);} }
				ha:Change size of selected objects {
					li:submenu {
						ha:Lines -10 mil = { li:action={ChangeSize(SelectedLines,-10,mil); ChangeSize(SelectedArcs,-10,mil)} }
						ha:Lines +10 mil = { li:action={ChangeSize(SelectedLines,+10,mil); ChangeSize(SelectedArcs,+10,mil)} }
						ha:Pads -10 mil  = { action=ChangeSize(SelectedPads,-10,mil) }
						ha:Pads +10 mil  = { action=ChangeSize(SelectedPads,+10,mil) }
						ha:Pins -10 mil  = { action=ChangeSize(SelectedPins,-10,mil) }
						ha:Pins +10 mil  = { action=ChangeSize(SelectedPins,+10,mil) }
						ha:Texts -10 mil = { action=ChangeSize(SelectedTexts,-10,mil) }
						ha:Texts +10 mil = { action=ChangeSize(SelectedTexts,+10,mil) }
						ha:Vias -10 mil  = { action=ChangeSize(SelectedVias,-10,mil) }
						ha:Vias +10 mil  = { action=ChangeSize(SelectedVias,+10,mil) }
					}
				}
				ha:Change drilling hole of selected padstacks {
					li:submenu {
						ha:Vias -10 mil = { action=ChangeDrillSize(SelectedPadstacks,-10,mil) }
						ha:Vias +10 mil = { action=ChangeDrillSize(SelectedPadstacks,+10,mil) }
					}
				}
			}
		} # Select

		ha:Buffer {
			m=B
			li:submenu {
				ha:Rotate buffer 90 deg CCW   = { li:a={{<key>b;<key>r;<key>r}; {Shift<Key>F7};}; li:action={Mode(PasteBuffer); PasteBuffer(Rotate,1)} }
				ha:Rotate buffer 90 deg CW    = { a={<key>b;<key>r;<key>c}; li:action={Mode(PasteBuffer); PasteBuffer(Rotate,3)} }
				ha:Arbitrarily Rotate Buffer  = { a={<key>b;<key>r;<key>a}; li:action={Mode(PasteBuffer); FreeRotateBuffer()} }
				ha:Mirror buffer (up/down)    = { a={<key>b;<key>m;<key>u}; li:action={Mode(PasteBuffer); PasteBuffer(Mirror)} }
				ha:Mirror buffer (left/right) = { a={<key>b;<key>m;<key>l}; li:action={Mode(PasteBuffer); PasteBuffer(Rotate,1); PasteBuffer(Mirror); PasteBuffer(Rotate,3)} }
				-
				ha:Clear buffer                    = { a={<key>b;<key>c;<key>c;}; action=PasteBuffer(Clear) }
				ha:Convert buffer to subcircuit    = { a={<key>b;<key>c;<key>s}; action=PasteBuffer(ConvertSubc) }
				ha:Convert buffer to padstack      = { a={<key>b;<key>c;<key>p}; li:action={PadstackConvert(buffer); Mode(PasteBuffer);} }
				ha:Break buffer subcircuits to pieces = { a={<key>b;<key>s;<key>b};  action=PasteBuffer(Restore) }
				ha:Save buffer subcircuits to file = { a={<key>b;<key>s;<key>s}; action=Save(PasteBuffer) }
				ha:Layer bindings...               = { a={<key>b;<key>b;}; action=LayerBinding(buffer) }

				ha:Buffer selection {
					li:submenu {
						ha:Select Buffer \#1 = { checked=ChkBuffer(1); m=1; a={<key>b;<Key>1;} action=PasteBuffer(1); update_on={editor/buffer_number} }
						ha:Select Buffer \#2 = { checked=ChkBuffer(2); m=2; a={<key>b;<Key>2;} action=PasteBuffer(2); update_on={editor/buffer_number} }
						ha:Select Buffer \#3 = { checked=ChkBuffer(3); m=3; a={<key>b;<Key>3;} action=PasteBuffer(3); update_on={editor/buffer_number} }
						ha:Select Buffer \#4 = { checked=ChkBuffer(4); m=4; a={<key>b;<Key>4;} action=PasteBuffer(4); update_on={editor/buffer_number} }
						ha:Select Buffer \#5 = { checked=ChkBuffer(5); m=5; a={<key>b;<Key>5;} action=PasteBuffer(5); update_on={editor/buffer_number} }
					}
				}
			}
		} # Buffer

		ha:Connects = {
			m=C
			li:submenu {
				ha:Rats nest {
					li:submenu {
						ha:Optimize rats nest                    = { a={<key>c;<key>r;}; li:action={Atomic(Save); DeleteRats(AllRats); Atomic(Restore); AddRats(AllRats); Atomic(Block)} }
						ha:Erase rats nest                       = { a={<key>c;<key>e;}; action=DeleteRats(AllRats) }
						-
						ha:Select shortest rat                   = { a={<key>c;<key>s;}; action=AddRats(Close) }
						ha:AddRats to selected pins              = { li:action={Atomic(Save); DeleteRats(AllRats); Atomic(Restore); AddRats(SelectedRats); Atomic(Block)} }
						ha:AddRats Selected                      = { action=AddRats(SelectedRats) }
						ha:Add All Rats                          = { action=AddRats(AllRats) }
					}
				}
				-
				ha:Find Connections                          = { a={<key>c;<key>f;}; li:action={Connection(Reset); Connection(Find)} }
				ha:Clear/reset lookup                        = { a={<key>c;<key>c;}; li:action={Connection(Reset); Display(Redraw)} }
				-
				ha:Del/Remove Connected                      = { a={<key>c;<key>d;}; li:action={Atomic(Save); Connection(Reset); Atomic(Restore); Unselect(All); Atomic(Restore); Connection(Find); Atomic(Restore); Select(Connection); Atomic(Restore); RemoveSelected(); Atomic(Restore); Connection(Reset); Atomic(Restore); Unselect(All); Atomic(Block)} }
				-
				ha:Subcircuit Placement {
					li:submenu {
						ha:Auto-place selected subcircuits       = { a={<key>a;<key>p;<key>s;}; action=AutoPlaceSelected() }
						ha:Disperse all subcircuits              = { a={<key>a;<key>d;<key>a;}; action=DisperseElements(All) }
						ha:Disperse selected subcircuits         = { a={<key>a;<key>d;<key>s;}; action=DisperseElements(Selected) }
					}
				}
				ha:Automatic Routing {
					li:submenu {
						ha:Auto-route selected rats              = { a={<key>a;<key>r;<key>s;}; action=AutoRoute(SelectedRats) }
						ha:Auto-route all rats                   = { a={<key>a;<key>r;<key>a;}; action=AutoRoute(AllRats) }
						ha:Rip up selected auto-routed tracks    = { a={<key>a;<key>r;<key>t;}; action=RipUp(Selected) }
						ha:Rip up all auto-routed tracks         = { a={<key>a;<key>r;<key>r;}; action=RipUp(All) }
					}
				}
				ha:Optimize routed tracks {
					li:submenu {
						ha:Auto-Optimize        = { a={<key>a;<key>o;<key>a;}; action=djopt(auto) }
						ha:Debumpify            = { a={<key>a;<key>o;<key>d;}; action=djopt(debumpify) }
						ha:Unjaggy              = { a={<key>a;<key>o;<key>u;}; action=djopt(unjaggy) }
						ha:Vianudge             = { a={<key>a;<key>o;<key>n;}; action=djopt(vianudge) }
						ha:Viatrim              = { a={<key>a;<key>o;<key>t;}; action=djopt(viatrim) }
						ha:Ortho pull           = { a={<key>a;<key>o;<key>o;}; action=djopt(orthopull) }
						ha:Simple optimization  = { a={<key>a;<key>o;<key>s;}; action=djopt(simple) }
						ha:Miter                = { a={<key>a;<key>o;<key>m;}; action=djopt(miter) }
						ha:Puller               = { a={<key>a;<key>o;<key>p;}; action=Puller() }
						ha:Global Puller {
							li:submenu {
								ha:Selected  = { action=GlobalPuller(selected) }
								ha:Found     = { action=GlobalPuller(found) }
								ha:All       = { action=GlobalPuller() }
							}
						}
						-
						ha:Only autorouted nets = { checked=plugins/djopt/auto_only; action=conf(toggle, plugins/djopt/auto_only, design) }
					}
				}
				-
				ha:Design Rule Checker = { a={<key>a;<key>a;}; action=DRC() }
				-
				ha:Apply vendor drill mapping = { a={<key>a;<key>v;}; action=ApplyVendor() }
				-
				ha:Design changes (back annotation) {
					li:submenu {
						ha:Swap nets on two selected pins  = { a={<key>a;<key>b;<key>s;}; action=net(swap) }
						ha:Replace footprint               = { a={<key>a;<key>b;<key>f;}; action=ReplaceFootprint() }
					}
				}
			}
		} # Connects
	
		ha:Plugins {
			m=P
			li:submenu {
				ha:Manage plugins... = { a={<Key>f;<Key>c;<Key>p;}; action=ManagePlugins() }
			}
		} # Plugins

		ha:Window {
			m=W
			li:submenu {
				ha:Library        = { a={<Key>w;<Key>l}; action=DoWindows(Library) }
				ha:Message Log    = { a={<Key>w;<Key>m}; action=DoWindows(Log) }
				ha:DRC Check      = { a={<Key>w;<Key>d}; action=DoWindows(DRC) }
				ha:Netlist        = { a={<Key>w;<Key>n}; action=DoWindows(Netlist) }
				ha:Command Entry  = { li:a={a={<Key>w;<Key>c}; {<char>:};}  action=Command() }
				ha:Pinout         = { a={<Key>w;<Key>p}; action=Display(Pinout) }
				ha:Font selector  = { a={<Key>w;<Key>f};  action=FontSel() }
				-
				ha:Key Bindings {
					li:submenu {
						ha:Cycle object being dragged   = { li:a={{<char>,};{<key>e;<key>y;};}; action=CycleDrag() }
						ha:MarkCrosshair                = { action=MarkCrosshair() }

						ha:Change object {
							li:submenu {
								ha:ChangeJoin Object            = { action=ChangeJoin(Object) }
								ha:ChangeJoin SelectedObject    = { action=ChangeJoin(SelectedObjects) }
								ha:Clear Object +2 mil          = { action=ChangeClearSize(Object,+2,mil) }
								ha:Clear Object -2 mil          = { action=ChangeClearSize(Object,-2,mil) }
								ha:Clear Selected +2 mil        = { action=ChangeClearSize(SelectedObjects,+2,mil) }
								ha:Clear Selected -2 mil        = { action=ChangeClearSize(SelectedObjects,-2,mil) }
								ha:Line Tool size +5 mil        = { action=SetValue(LineSize,+5,mil) }
								ha:Line Tool size -5 mil        = { action=SetValue(LineSize,-5,mil) }
								ha:Polygon PreviousPoint        = { action=Polygon(PreviousPoint) }
								ha:Polygon Close                = { action=Polygon(Close) }
								ha:ChangeSizes to Route style   = { action=ChangeSizes(Object,style,mil) }
								ha:ChangeSize +5 mil            = { action=ChangeSize(Object,+5,mil) }
								ha:ChangeSize -5 mil            = { action=ChangeSize(Object,-5,mil) }
								ha:ChangeDrill +5 mil           = { action=ChangeDrillSize(Object,+5,mil) }
								ha:ChangeDrill -5 mil           = { action=ChangeDrillSize(Object,-5,mil) }
								ha:Text Tool scale +10 mil      = { action=SetValue(TextScale,+10,mil) }
								ha:Text Tool scale -10 mil      = { action=SetValue(TextScale,-10,mil) }
								ha:Via Tool size +5 mil         = { action=SetValue(ViaSize,+5,mil) }
								ha:Via Tool size -5 mil         = { action=SetValue(ViaSize,-5,mil) }
								ha:Via Tool drill +5 mil        = { action=SetValue(ViaDrillingHole,+5,mil) }
								ha:Via Tool drill -5 mil        = { action=SetValue(ViaDrillingHole,-5,mil) }
								ha:Route radius +0.5            = { action=conf(delta, editor/route_radius, +0.5, design); }
								ha:Route radius -0.5            = { action=conf(delta, editor/route_radius, -0.5, design); }
							}
						}
						ha:Step Cursor {
							li:submenu {
								ha:Step Up                      = { a=<Key>Up; action=Cursor(Warp,0,1,grid) }
								ha:Step Down                    = { a=<Key>Down; action=Cursor(Warp,0,-1,grid) }
								ha:Step Left                    = { a=<Key>Left; action=Cursor(Warp,-1,0,grid) }
								ha:Step Right                   = { a=<Key>Right; action=Cursor(Warp,1,0,grid) }
								ha:Step +Up                     = { a=Shift<Key>Up; action=Cursor(Pan,0,50,view) }
								ha:Step +Down                   = { a=Shift<Key>Down; action=Cursor(Pan,0,-50,view) }
								ha:Step +Left                   = { a=Shift<Key>Left; action=Cursor(Pan,-50,0,view) }
								ha:Step +Right                  = { a=Shift<Key>Right; action=Cursor(Pan,50,0,view) }
								ha:Click                        = { a=<Key>Enter; li:action={Mode(Notify); Mode(Release)} }
							}
						}
						ha:layer keys {
							li:submenu {
								ha:Select Layer 1           = { a=<Key>1; action=SelectLayer(1) }
								ha:Select Layer 2           = { a=<Key>2; action=SelectLayer(2) }
								ha:Select Layer 3           = { a=<Key>3; action=SelectLayer(3) }
								ha:Select Layer 4           = { a=<Key>4; action=SelectLayer(4) }
								ha:Select Layer 5           = { a=<Key>5; action=SelectLayer(5) }
								ha:Select Layer 6           = { a=<Key>6; action=SelectLayer(6) }
								ha:Select Layer 7           = { a=<Key>7; action=SelectLayer(7) }
								ha:Select Layer 8           = { a=<Key>8; action=SelectLayer(8) }
								ha:Select Layer 9           = { a=<Key>9; action=SelectLayer(9) }
								ha:Select Layer 10          = { a=<Key>0; action=SelectLayer(10) }
								ha:Select Layer 11          = { a=Alt<Key>1; action=SelectLayer(11) }
								ha:Select Layer 12          = { a=Alt<Key>2; action=SelectLayer(12) }
								ha:Select Layer 13          = { a=Alt<Key>3; action=SelectLayer(13) }
								ha:Select Layer 14          = { a=Alt<Key>4; action=SelectLayer(14) }
								ha:Select Layer 15          = { a=Alt<Key>5; action=SelectLayer(15) }
								ha:Select Layer 16          = { a=Alt<Key>6; action=SelectLayer(16) }
								ha:Select Layer 17          = { a=Alt<Key>7; action=SelectLayer(17) }
								ha:Select Layer 18          = { a=Alt<Key>8; action=SelectLayer(18) }
								ha:Select Layer 19          = { a=Alt<Key>9; action=SelectLayer(19) }
								ha:Select Layer 20          = { a=Alt<Key>0; action=SelectLayer(20) }
								-
								ha:Toggle Layer 1           = { a=Ctrl<Key>1; action=ToggleView(1) }
								ha:Toggle Layer 2           = { a=Ctrl<Key>2; action=ToggleView(2) }
								ha:Toggle Layer 3           = { a=Ctrl<Key>3; action=ToggleView(3) }
								ha:Toggle Layer 4           = { a=Ctrl<Key>4; action=ToggleView(4) }
								ha:Toggle Layer 5           = { a=Ctrl<Key>5; action=ToggleView(5) }
								ha:Toggle Layer 6           = { a=Ctrl<Key>6; action=ToggleView(6) }
								ha:Toggle Layer 7           = { a=Ctrl<Key>7; action=ToggleView(7) }
								ha:Toggle Layer 8           = { a=Ctrl<Key>8; action=ToggleView(8) }
								ha:Toggle Layer 9           = { a=Ctrl<Key>9; action=ToggleView(9) }
								ha:Toggle Layer 10          = { a=Ctrl<Key>0; action=ToggleView(10) }
								ha:Toggle Layer 11          = { a=Ctrl-Alt<Key>1; action=ToggleView(11) }
								ha:Toggle Layer 12          = { a=Ctrl-Alt<Key>2; action=ToggleView(12) }
								ha:Toggle Layer 13          = { a=Ctrl-Alt<Key>3; action=ToggleView(13) }
								ha:Toggle Layer 14          = { a=Ctrl-Alt<Key>4; action=ToggleView(14) }
								ha:Toggle Layer 15          = { a=Ctrl-Alt<Key>5; action=ToggleView(15) }
								ha:Toggle Layer 16          = { a=Ctrl-Alt<Key>6; action=ToggleView(16) }
								ha:Toggle Layer 17          = { a=Ctrl-Alt<Key>7; action=ToggleView(17) }
								ha:Toggle Layer 18          = { a=Ctrl-Alt<Key>8; action=ToggleView(18) }
								ha:Toggle Layer 19          = { a=Ctrl-Alt<Key>9; action=ToggleView(19) }
								ha:Toggle Layer 20          = { a=Ctrl-Alt<Key>0; action=ToggleView(20) }
							}
						} # layer keys
					}
				}
				ha:About...       = { li:a={{<Key>w;<Key>a}; {<key>i;<key>a};}; action=About() }
			}
		} # Window
	} # main menu

	li:popups {
# context sensitive right click: popup per object type under the cursor

		ha:popup-obj-line {
			li:submenu {
				ha:Edit properties        { li:action={Unselect(All); Select(object); propedit(); } }
				ha:Set Same as style      { action=SetSame() }
				-
				ha:Remove line            { li:action={Mode(Save); Mode(Remove); Mode(Notify); Mode(Restore)} }
				ha:Copy to buffer         { li:action={Unselect(All); Select(object); PasteBuffer(Clear); PasteBuffer(AddSelected); Unselect(All); Mode(PasteBuffer) } }
				ha:Move to current layer  { action=MoveToCurrentLayer(object) }
			}
		}

		ha:popup-obj-arc {
			li:submenu {
				ha:Edit properties        { li:action={Unselect(All); Select(object); propedit(); } }
				ha:Set Same as style      { action=SetSame() }
				-
				ha:Remove arc             { li:action={Mode(Save); Mode(Remove); Mode(Notify); Mode(Restore)} }
				ha:Copy to buffer         { li:action={Unselect(All); Select(object); PasteBuffer(Clear); PasteBuffer(AddSelected); Unselect(All); Mode(PasteBuffer) } }
				ha:Move to current layer  { action=MoveToCurrentLayer(object) }
			}
		}

		ha:popup-obj-polygon {
			li:submenu {
				ha:Edit properties        { li:action={Unselect(All); Select(object); propedit(); } }
				-
				ha:Remove polygon         { li:action={Mode(Save); Mode(Remove); Mode(Notify); Mode(Restore)} }
				ha:Copy to buffer         { li:action={Unselect(All); Select(object); PasteBuffer(Clear); PasteBuffer(AddSelected); Unselect(All); Mode(PasteBuffer) } }
				ha:Move to current layer  { action=MoveToCurrentLayer(object) }
			}
		}

		ha:popup-obj-text {
			li:submenu {
				ha:Edit properties        { li:action={Unselect(All); Select(object); propedit(); } }
				ha:Edit text              { action=ChangeName(Object) }
				ha:Set Same as style      { action=SetSame() }
				-
				ha:Remove text            { li:action={Mode(Save); Mode(Remove); Mode(Notify); Mode(Restore)} }
				ha:Copy to buffer         { li:action={Unselect(All); Select(object); PasteBuffer(Clear); PasteBuffer(AddSelected); Unselect(All); Mode(PasteBuffer) } }
				ha:Move to current layer  { action=MoveToCurrentLayer(object) }
			}
		}

		ha:popup-obj-padstack {
			li:submenu {
				ha:Edit properties        { li:action={Unselect(All); Select(object); propedit(); } }
				ha:Edit geometry/prototype {action=padstackedit }
				ha:Set Same as style      { action=SetSame() }
				-
				ha:Remove padstack        { li:action={Mode(Save); Mode(Remove); Mode(Notify); Mode(Restore)} }
				ha:Copy to buffer         { li:action={Unselect(All); Select(object); PasteBuffer(Clear); PasteBuffer(AddSelected); Unselect(All); Mode(PasteBuffer) } }
			}
		}

		ha:popup-obj-subcircuit {
			li:submenu {
				ha:Edit properties        { li:action={Unselect(All); Select(object); propedit(); } }
				ha:External editor...     { action=extedit(object) }
#TODO: replace from lib
				-
				ha:Remove subcircuit      { li:action={Mode(Save); Mode(Remove); Mode(Notify); Mode(Restore)} }
				ha:Copy to buffer         { li:action={Unselect(All); Select(object); PasteBuffer(Clear); PasteBuffer(AddSelected); Unselect(All); Mode(PasteBuffer) } }
				ha:Move to other side     { action=Flip(object) }
			}
		}

		ha:popup-obj-misc {
			li:submenu {
				ha:Operations on selections {
					li:submenu {
						ha:Unselect all objects               = { action=Unselect(All) }
						ha:Remove selected objects            = { action=RemoveSelected() }
						ha:Copy selection to buffer           = { li:action={GetXY(Click to set the snap point for this buffer); PasteBuffer(Clear); PasteBuffer(AddSelected); Mode(PasteBuffer)} }
						ha:Cut selection to buffer            = { li:action={GetXY(Click to set the snap point for this buffer); PasteBuffer(Clear); PasteBuffer(AddSelected); RemoveSelected(); Mode(PasteBuffer)} }
						ha:Convert selection to subcircuit    = { action=Select(ConvertSubc) }
						ha:Auto place selected subcircuits    = { action=AutoPlaceSelected() }
						ha:Autoroute selected subcircuits     = { action=AutoRoute(SelectedRats) }
						ha:Rip up selected auto-routed tracks = { action=RipUp(Selected) }
						ha:Rotate selected                    = { action={GetXY(Click to set the snap point for this buffer); PasteBuffer(Clear); PasteBuffer(AddSelected); RemoveSelected(); Mode(PasteBuffer) FreeRotateBuffer(); Mode(PasteBuffer); PasteBuffer(Tolayout, crosshair); } }
					}
				}
				ha:Operations on this location {
					li:submenu {
						ha:Generate object report = { li:action={GetXY(Click on the object); Report(Object)} }
					}
				}
				-
				ha:Undo last operation          = { action=Undo() }
				ha:Redo last undone operation   = { action=Redo() }
			}
		} # popup-obj-misc
	} # popups
} # root
